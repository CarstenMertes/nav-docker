name: Build missing images (after new windows updates)

on:
  workflow_dispatch:
    inputs:
      GenericTag:
        description: Generic Tag (leave empty to use value in generic/tag.txt)
        required: false
        default: ''
      PushToProd:
        description: Push to production (Y/N)
        required: false
        default: 'N'

permissions:
  contents: read

defaults:
  run:
    shell: PowerShell

jobs:
  AnalyzeImages:
    runs-on: [ windows-latest ]
    outputs:
      server2022: ${{ steps.Analyze.outputs.server2022 }}
      server2022filesOnly: ${{ steps.Analyze.outputs.server2022filesOnly }}
    steps:
      - name: Analyze
        id: Analyze
        run: |
          $erroractionpreference = "STOP"
          try {
            $webclient = New-Object System.Net.WebClient
            $webclient.Headers.Add('Accept', "application/json")
            $alltags = (($webclient.DownloadString("https://mcr.microsoft.com/v2/businesscentral/tags/list") | ConvertFrom-Json)).tags
            $version = [System.Version]"0.0.0.0"
            $versions = $alltags | Where-Object { [System.Version]::TryParse($_, [ref] $version) } | ForEach-Object { $version }
            $filesOnlyVersions = $alltags | Where-Object { $_ -like '*-filesonly' } | Where-Object { [System.Version]::TryParse($_.SubString(0,$_.Length-10), [ref] $version) } | ForEach-Object { $version }
            $missingImages = @{}
            $missingFilesOnlyImages = @{}
            $alldotnetFrameworkTags = (($webclient.DownloadString("https://mcr.microsoft.com/v2/dotnet/framework/runtime/tags/list") | ConvertFrom-Json)).tags
            $alldotnetFrameworkTags | Where-Object { $_.startswith("4.8-w") -or $_.startswith("4.8-20") } | ForEach-Object {
                Write-Host -NoNewline "Test $_ ($OSVersion)"
                $osVersion = [System.Version](($webclient.DownloadString("https://mcr.microsoft.com/v2/dotnet/framework/runtime/manifests/$_") | ConvertFrom-Json).history[0].v1Compatibility | ConvertFrom-Json)."os.version"
                if ($versions.Contains($osversion)) {
                    Write-Host -NoNewline " - OK"
                }
                else {
                    $missingImages."$osversion" = $_
                    Write-Host -NoNewline " - Missing"
                }
                if ($filesOnlyVersions.Contains($osversion)) {
                    Write-Host " - OK"
                }
                else {
                    $missingFilesOnlyImages."$osversion" = $_
                    Write-Host " - Missing"
                }
            }
            $server2022 = @($missingImages.GetEnumerator() | Where-Object { $_ } | ForEach-Object { "$($_.name)|$($_.value)" }) | ConvertTo-Json -Compress
            $server2022filesOnly = @($missingFilesOnlyImages.GetEnumerator() | Where-Object { $_ } | ForEach-Object { "$($_.name)|$($_.value)" }) | ConvertTo-Json -Compress
            Write-Host "::set-output name=server2022::[$("$server2022".Trim('[]'))]"
            Write-Host "set-output name=server2022::[$("$server2022".Trim('[]'))]"
            Write-Host "::set-output name=server2022filesOnly::[$("$server2022filesOnly".Trim('[]'))]"
            Write-Host "set-output name=server2022filesOnly::[$("$server2022filesOnly".Trim('[]'))]"
          }
          catch {
            Write-Host "::Error::Error analyzing images. Error was $($_.Exception.Message)"
            $host.SetShouldExit(1)            
          }

  Server2022:
    runs-on: [ buildgeneric ]
    needs: [ AnalyzeImages ]
    strategy:
      matrix:
        version: ${{fromJson(needs.AnalyzeImages.outputs.server2022)}}
      fail-fast: false
      max-parallel: 5
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Build Image
        run: |
          $filesOnlyStr = ""
          $erroractionpreference = "STOP"
          Set-StrictMode -version 2.0
          try {
            $pushRegistry = "mcrbusinesscentral.azurecr.io"
            $job = start-job -ScriptBlock { Param($username, $token, $registry)
              Write-Output $token | docker login --username $username --password-stdin $registry
            } -ArgumentList '${{ secrets.PushUsername }}', '${{ secrets.PushToken }}', $pushRegistry
            $job | Wait-Job | Out-Null
            $result = receive-job $job 2> $NULL
          }
          catch {}
          try {
            if ($result -ne 'Login Succeeded') {
              throw "docker login failed"
            }
            Set-Location "generic"
            $genericTag = '${{ github.event.inputs.GenericTag }}'
            if ($genericTag -eq '') { $genericTag = Get-Content -path 'tag.txt' }
            [System.Version]$genericTag | Out-Null
            $pushToProd = '${{ github.event.inputs.PushToProd }}' -eq 'Y'
            $osversion = '${{ matrix.version }}'.split('|')[0]
            $dotnetFrameworkTag = '${{ matrix.version }}'.split('|')[1]
            $baseimage = "mcr.microsoft.com/dotnet/framework/runtime:$dotnetFrameworkTag"
            
            $rootPath = Get-Location
            if ($filesOnlyStr) {
              $dockerfile = Join-Path $rootPath "DOCKERFILE.filesonly"
            }
            else {
              $dockerfile = Join-Path $rootPath "DOCKERFILE"
            }

            $image = "my:$osversion-$genericTag$filesonlyStr"
            $created = [DateTime]::Now.ToUniversalTime().ToString("yyyyMMddHHmm")
            docker pull $baseimage
            $inspect = docker inspect $baseimage | ConvertFrom-Json

            $success = $false
            docker build --build-arg baseimage=$baseimage `
                         --build-arg created=$created `
                         --build-arg tag="$genericTag" `
                         --build-arg osversion="$osversion" `
                         --isolation=hyperv `
                         --memory 8G `
                         --tag $image `
                         --file $dockerfile `
                         $RootPath | % {
              $_ | Out-Host
              if ($_ -like "Successfully built*") {
                $success = $true
              }
            }
            if (!$success) {
              throw "Error building image"
            }
            $newtags = @(
              "$pushRegistry/public/businesscentral:$osversion$filesonlyStr-dev"
            )
            if ($pushToProd) {
              $newtags += @(
                  "$pushRegistry/public/businesscentral:$osversion$filesonlyStr"
                  "$pushRegistry/public/businesscentral:$osversion-$genericTag$filesonlyStr"
              )
            }
            $newtags | ForEach-Object {
              Write-Host "Push $_"
              docker tag $image $_
              docker push $_
            }
          }
          catch {
            Write-Host "::Error::Error building images. Error was $($_.Exception.Message)"
            $host.SetShouldExit(1)            
          }

  Server2022filesOnly:
    runs-on: [ buildgeneric ]
    needs: [ AnalyzeImages ]
    strategy:
      matrix:
        version: ${{fromJson(needs.AnalyzeImages.outputs.server2022filesOnly)}}
      fail-fast: false
      max-parallel: 5
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Build Image
        run: |
          $filesOnlyStr = "-filesonly"
          $erroractionpreference = "STOP"
          Set-StrictMode -version 2.0
          try {
            $pushRegistry = "mcrbusinesscentral.azurecr.io"
            $job = start-job -ScriptBlock { Param($username, $token, $registry)
              Write-Output $token | docker login --username $username --password-stdin $registry
            } -ArgumentList '${{ secrets.PushUsername }}', '${{ secrets.PushToken }}', $pushRegistry
            $job | Wait-Job | Out-Null
            $result = receive-job $job 2> $NULL
          }
          catch {}
          try {
            if ($result -ne 'Login Succeeded') {
              throw "docker login failed"
            }
            Set-Location "generic"
            $genericTag = '${{ github.event.inputs.GenericTag }}'
            if ($genericTag -eq '') { $genericTag = Get-Content -path 'tag.txt' }
            [System.Version]$genericTag | Out-Null
            $pushToProd = '${{ github.event.inputs.PushToProd }}' -eq 'Y'
            $osversion = '${{ matrix.version }}'.split('|')[0]
            $dotnetFrameworkTag = '${{ matrix.version }}'.split('|')[1]
            $baseimage = "mcr.microsoft.com/dotnet/framework/runtime:$dotnetFrameworkTag"
            
            $rootPath = Get-Location
            if ($filesOnlyStr) {
              $dockerfile = Join-Path $rootPath "DOCKERFILE.filesonly"
            }
            else {
              $dockerfile = Join-Path $rootPath "DOCKERFILE"
            }

            $image = "my:$osversion-$genericTag$filesonlyStr"
            $created = [DateTime]::Now.ToUniversalTime().ToString("yyyyMMddHHmm")
            docker pull $baseimage
            $inspect = docker inspect $baseimage | ConvertFrom-Json

            $success = $false
            docker build --build-arg baseimage=$baseimage `
                         --build-arg created=$created `
                         --build-arg tag="$genericTag" `
                         --build-arg osversion="$osversion" `
                         --isolation=hyperv `
                         --memory 8G `
                         --tag $image `
                         --file $dockerfile `
                         $RootPath | % {
              $_ | Out-Host
              if ($_ -like "Successfully built*") {
                $success = $true
              }
            }
            if (!$success) {
              throw "Error building image"
            }
            $newtags = @(
              "$pushRegistry/public/businesscentral:$osversion$filesonlyStr-dev"
            )
            if ($pushToProd) {
              $newtags += @(
                  "$pushRegistry/public/businesscentral:$osversion$filesonlyStr"
                  "$pushRegistry/public/businesscentral:$osversion-$genericTag$filesonlyStr"
              )
            }
            $newtags | ForEach-Object {
              Write-Host "Push $_"
              docker tag $image $_
              docker push $_
            }
          }
          catch {
            Write-Host "::Error::Error building images. Error was $($_.Exception.Message)"
            $host.SetShouldExit(1)            
          }
