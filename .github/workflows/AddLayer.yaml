name: AddLayer

on:
  workflow_dispatch:

permissions:
  contents: read

defaults:
  run:
    shell: PowerShell

jobs:
  AnalyzeImages:
    runs-on: [ windows-latest ]
    outputs:
      server2019: ${{ steps.Analyze.outputs.server2019 }}
      server2022: ${{ steps.Analyze.outputs.server2022 }}
    steps:
      - name: Analyze
        id: Analyze
        run: |
          $erroractionpreference = "STOP"
          try {
            $webclient = New-Object System.Net.WebClient
            $webclient.Headers.Add('Accept', "application/json")
            $url = "https://mcr.microsoft.com/v2/businesscentral/tags/list"
            $version = [System.Version]"0.0.0.0"
            $versions = (($webclient.DownloadString("$url") | ConvertFrom-Json)).tags | Where-Object { [System.Version]::TryParse($_, [ref] $version) } | ForEach-Object { $version }
            $server2019 = @($versions | Where-Object { $_ -lt [System.Version]"10.0.17764.0" } | ForEach-Object { "$_" } | ConvertTo-Json -compress
            $server2022 = @($versions | Where-Object { $_ -ge [System.Version]"10.0.17764.0" } | ForEach-Object { "$_" } | ConvertTo-Json -compress
            Write-Host "::set-output name=server2019::$server2019"
            Write-Host "set-output name=server2019::$server2019"
            Write-Host "::set-output name=server2022::$server2022"
            Write-Host "set-output name=server2022::$server2022"
          }
          catch {
            Write-Host "::Error::Error analyzing images. Error was $($_.Exception.Message)"
            $host.SetShouldExit(1)            
          }

  Server2019:
    runs-on: [ windows-2019 ]
    needs: [ AnalyzeImages ]
    strategy:
      matrix:
        version: ${{fromJson(needs.AnalyzeImages.outputs.server2019)}}
      fail-fast: false
      max-parallel: 100
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Build Image
        run: |
          $erroractionpreference = "STOP"
          try {
            $osversion = '${{ matrix.version }}'
            $baseimage = "mcr.microsoft.com/businesscentral:$osversion"
            $genericTag = "1.0.2.10"
            $filesOnlyStr = ""
            $image = "my:$osversion-$genericTag$filesonlyStr"
            $created = [DateTime]::Now.ToUniversalTime().ToString("yyyyMMddHHmm")
            docker pull $baseimage
            Set-Location "generic"
            $dockerfile = Join-Path (Get-Location) "DOCKERFILE.UPDATE"
            "FROM $baseimage`nCOPY Run /Run/`nLABEL tag=""$genericTag"" \`n      created=""$created""`n" | Set-Content $dockerfile
            docker build --isolation=hyperv --tag $image --file $dockerfile --memory 4G (Get-Location)
          }
          catch {
            Write-Host "::Error::Error analyzing images. Error was $($_.Exception.Message)"
            $host.SetShouldExit(1)            
          }

  Server2022:
    runs-on: [ windows-2022 ]
    needs: [ AnalyzeImages ]
    strategy:
      matrix:
        version: ${{fromJson(needs.AnalyzeImages.outputs.server2022)}}
      fail-fast: false
      max-parallel: 100
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Build Image
        run: |
          $erroractionpreference = "STOP"
          try {
            $osversion = '${{ matrix.version }}'
            $baseimage = "mcr.microsoft.com/businesscentral:$osversion"
            $genericTag = "1.0.2.10"
            $filesOnlyStr = ""
            $image = "my:$osversion-$genericTag$filesonlyStr"
            $created = [DateTime]::Now.ToUniversalTime().ToString("yyyyMMddHHmm")
            docker pull $baseimage
            Set-Location "generic"
            $dockerfile = Join-Path (Get-Location) "DOCKERFILE.UPDATE"
            "FROM $baseimage`nCOPY Run /Run/`nLABEL tag=""$genericTag"" \`n      created=""$created""`n" | Set-Content $dockerfile
            docker build --isolation=hyperv --tag $image --file $dockerfile --memory 4G (Get-Location)
          }
          catch {
            Write-Host "::Error::Error analyzing images. Error was $($_.Exception.Message)"
            $host.SetShouldExit(1)            
          }
